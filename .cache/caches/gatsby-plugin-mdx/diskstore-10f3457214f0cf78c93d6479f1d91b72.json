{"expireTime":9007200842197578000,"key":"gatsby-plugin-mdx-entire-payload-79f249f2b21643788c24ee9c8a3d7e3a-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"WordPress с React","position":{"start":{"line":2,"column":3,"offset":4},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Каждому разработчику и его собаке есть что сказать о WordPress, и это не всегда лестно. Отнюдь не. Однако даже самые заядлые хулители вынуждены обратить внимание на эту функцию, потому что она уже изменила способ использования популярной CMS.","position":{"start":{"line":4,"column":1,"offset":25},"end":{"line":4,"column":243,"offset":267},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":25},"end":{"line":4,"column":243,"offset":267},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"WordPress с React\",\"metaTitle\":\"WordPress как безголовая CMS \",\"metaDescription\":\"WordPress в качестве бэкэнда и REST API для подачи данных в приложение React\"}","position":{"start":{"line":8,"column":1,"offset":273},"end":{"line":8,"column":199,"offset":471},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":8,"column":199,"offset":471}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"WordPress с React\",\n  \"metaTitle\": \"WordPress как безголовая CMS \",\n  \"metaDescription\": \"WordPress в качестве бэкэнда и REST API для подачи данных в приложение React\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"WordPress \\u0441 React\"), mdx(\"p\", null, \"\\u041A\\u0430\\u0436\\u0434\\u043E\\u043C\\u0443 \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u0447\\u0438\\u043A\\u0443 \\u0438 \\u0435\\u0433\\u043E \\u0441\\u043E\\u0431\\u0430\\u043A\\u0435 \\u0435\\u0441\\u0442\\u044C \\u0447\\u0442\\u043E \\u0441\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u043E WordPress, \\u0438 \\u044D\\u0442\\u043E \\u043D\\u0435 \\u0432\\u0441\\u0435\\u0433\\u0434\\u0430 \\u043B\\u0435\\u0441\\u0442\\u043D\\u043E.\\xA0\\u041E\\u0442\\u043D\\u044E\\u0434\\u044C \\u043D\\u0435.\\xA0\\u041E\\u0434\\u043D\\u0430\\u043A\\u043E \\u0434\\u0430\\u0436\\u0435 \\u0441\\u0430\\u043C\\u044B\\u0435 \\u0437\\u0430\\u044F\\u0434\\u043B\\u044B\\u0435 \\u0445\\u0443\\u043B\\u0438\\u0442\\u0435\\u043B\\u0438 \\u0432\\u044B\\u043D\\u0443\\u0436\\u0434\\u0435\\u043D\\u044B \\u043E\\u0431\\u0440\\u0430\\u0442\\u0438\\u0442\\u044C \\u0432\\u043D\\u0438\\u043C\\u0430\\u043D\\u0438\\u0435 \\u043D\\u0430 \\u044D\\u0442\\u0443 \\u0444\\u0443\\u043D\\u043A\\u0446\\u0438\\u044E, \\u043F\\u043E\\u0442\\u043E\\u043C\\u0443 \\u0447\\u0442\\u043E \\u043E\\u043D\\u0430 \\u0443\\u0436\\u0435 \\u0438\\u0437\\u043C\\u0435\\u043D\\u0438\\u043B\\u0430 \\u0441\\u043F\\u043E\\u0441\\u043E\\u0431 \\u0438\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F \\u043F\\u043E\\u043F\\u0443\\u043B\\u044F\\u0440\\u043D\\u043E\\u0439 CMS.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"WordPress с React\",\n  \"metaTitle\": \"WordPress как безголовая CMS \",\n  \"metaDescription\": \"WordPress в качестве бэкэнда и REST API для подачи данных в приложение React\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`WordPress с React`}</h1>\n    <p>{`Каждому разработчику и его собаке есть что сказать о WordPress, и это не всегда лестно. Отнюдь не. Однако даже самые заядлые хулители вынуждены обратить внимание на эту функцию, потому что она уже изменила способ использования популярной CMS.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}